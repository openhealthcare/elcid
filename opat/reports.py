from functools import partial
from django.utils.functional import cached_property
from reporting import Report, ReportFile
from opat import nors_utils
from opat import quarter_utils

FAKE_SUMMARY_DATA = {
    quarter_utils.Quarter(2018, 3): dict(
        episodes=50,
        episodes_rejected=15,
        total_treatment_days_saved=892,
        total_line_events=1,
        total_drug_events=5
    ),
    quarter_utils.Quarter(2018, 2): dict(
        episodes=48,
        episodes_rejected=13,
        total_treatment_days_saved=892,
        total_line_events=2,
        total_drug_events=4
    ),
    quarter_utils.Quarter(2018, 1): dict(
        episodes=46,
        episodes_rejected=14,
        total_treatment_days_saved=892,
        total_line_events=2,
        total_drug_events=5
    ),
    quarter_utils.Quarter(2017, 4): dict(
        episodes=49,
        episodes_rejected=15,
        total_treatment_days_saved=892,
        total_line_events=3,
        total_drug_events=1
    ),
    quarter_utils.Quarter(2017, 3): dict(
        episodes=50,
        episodes_rejected=14,
        total_treatment_days_saved=892,
        total_line_events=6,
        total_drug_events=5
    ),
    quarter_utils.Quarter(2017, 2): dict(
        episodes=48,
        episodes_rejected=12,
        total_treatment_days_saved=892,
        total_line_events=4,
        total_drug_events=2
    ),
    quarter_utils.Quarter(2017, 1): dict(
        episodes=43,
        episodes_rejected=14,
        total_treatment_days_saved=892,
        total_line_events=1,
        total_drug_events=7
    ),
    quarter_utils.Quarter(2016, 4): dict(
        episodes=51,
        episodes_rejected=15,
        total_treatment_days_saved=892,
        total_line_events=2,
        total_drug_events=5
    ),
    quarter_utils.Quarter(2016, 3): dict(
        episodes=52,
        episodes_rejected=12,
        total_treatment_days_saved=892,
        total_line_events=12,
        total_drug_events=5
    ),
    quarter_utils.Quarter(2016, 2): dict(
        episodes=54,
        episodes_rejected=13,
        total_treatment_days_saved=892,
        total_line_events=12,
        total_drug_events=5
    ),
    quarter_utils.Quarter(2016, 1): dict(
        episodes=49,
        episodes_rejected=13,
        total_treatment_days_saved=892,
        total_line_events=12,
        total_drug_events=5
    ),
    quarter_utils.Quarter(2015, 4): dict(
        episodes=50,
        episodes_rejected=11,
        total_treatment_days_saved=892,
        total_line_events=12,
        total_drug_events=5
    ),
}

class NORSReport(Report):
    slug = "nors-report"
    display_name = "OPAT NORS Report"
    description = "A quarterly summary of the OPAT service"
    template = "reports/opat/report_detail.html"

    def generate_report_data(self, criteria=None, **kwargs):
        quarter_start = criteria["quarter"]  # a string for example 2017_4

        # generated by the value field in reports_available
        quarter = quarter_utils.Quarter(
            *(int(i) for i in quarter_start.split("_"))
        )
        episodes = nors_utils.get_episodes_for_quarter(quarter)
        antimicrobials = nors_utils.get_antimicrobial_report(episodes)
        adverse_reactions = nors_utils.get_adverse_reactions(episodes)
        pid = nors_utils.get_primary_infective_diagnosis(episodes)
        summary = [nors_utils.get_summary(episodes, quarter)]
        episode_breakdown = nors_utils.get_episode_breakdown(episodes)
        
        fn = partial(self.get_file_name, quarter_start)
        return [
            ReportFile(
                file_name=fn("antimicrobials"),
                file_data=self.flatten_rows_of_dicts(antimicrobials)
            ),
            ReportFile(
                file_name=fn("adverse_reactions"),
                file_data=self.flatten_rows_of_dicts(adverse_reactions)
            ),
            ReportFile(
                file_name=fn("primary_infective_diagnosis"),
                file_data=self.flatten_rows_of_dicts(pid)
            ),
            ReportFile(
                file_name=fn("summary"),
                file_data=self.flatten_rows_of_dicts(summary)
            ),
            ReportFile(
                file_name=fn("episode_breakdown"),
                file_data=self.flatten_rows_of_dicts(episode_breakdown)
            )
        ]

    def flatten_rows_of_dicts(self, rows_of_dicts):
        """ Flattens out rows of dictionaries into
            something that yields lists of lists.

            (This is what reporting expects)
        """
        if not len(rows_of_dicts):
            yield []
        else:
            headers = rows_of_dicts[0].keys()
            yield headers
            for row in rows_of_dicts:
                yield [row[i] for i in headers]

    def get_file_name(self, quarter_start, some_str):
        return "{}_{}.csv".format(quarter_start, some_str)

    def report_options(self):
        return self._report_options

    @nors_utils.timing
    def get_report_options_for_quarters(self, amount):
        report_options = []

        quarters = quarter_utils.get_previous_quarters(amount)

        episodes_by_quarter = nors_utils.get_episodes_for_quarters(
            quarters
        )

        for quarter in quarters:
            if quarter not in FAKE_SUMMARY_DATA:
                continue
            episodes = episodes_by_quarter[quarter]
            value = "{}_{}".format(quarter.year, quarter.period)
            display_name = "{}-{}".format(
                quarter.start.strftime("%b"),
                quarter.end.strftime("%b %Y")
            )
            report_options.append(dict(
                template="reports/opat/report_option_template.html",
                criteria=dict(quarter=value),
                summary=FAKE_SUMMARY_DATA[quarter],
                display_name=display_name
            ))
        return report_options

    @cached_property
    def _report_options(self):
        return self.get_report_options_for_quarters(12)
